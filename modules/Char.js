modules.Char={"imports":{"mo:â›”":"Prim"},"functions":{"Char":{"desc":"Characters represented as Unicode code points.","body":"public type Char= Prim.Types.Char;"},"toNat32":{"desc":"// Convert character `c` to a word containing its Unicode scalar value.","body":"public let toNat32: (c : Char) -> Nat32 = Prim.charToNat32;"},"fromNat32":{"desc":"// Convert `w` to a character.\nTraps if `w` is not a valid Unicode scalar value.\nValue `w` is valid if, and only if, `w < 0xD800 or (0xE000 <= w and w <= 0x10FFFF)`.","body":"public let fromNat32: (w : Nat32) -> Char = Prim.nat32ToChar;"},"toText":{"desc":"// Convert character `c` to single character text.","body":"public let toText: (c : Char) -> Text = Prim.charToText;"},"isDigit":{"desc":"Returns `true` when `c` is a decimal digit between `0` and `9`, otherwise `false`.","body":"public func isDigit(c : Char) : Bool {\n  Prim.charToNat32(c) -% Prim.charToNat32('0') <= (9 : Nat32)\n}"},"isWhitespace":{"desc":"Returns the Unicode _White_Space_ property of `c`.","body":"public let isWhitespace: (c : Char) -> Bool = Prim.charIsWhitespace;"},"isLowercase":{"desc":"// Returns the Unicode _Lowercase_ property of `c`.","body":"public let isLowercase: (c : Char) -> Bool = Prim.charIsLowercase;"},"isUppercase":{"desc":"// Returns the Unicode _Uppercase_ property of `c`.","body":"public let isUppercase: (c : Char) -> Bool = Prim.charIsUppercase;"},"isAlphabetic":{"desc":"// Returns the Unicode _Alphabetic_ property of `c`.","body":"public let isAlphabetic: (c : Char) -> Bool = Prim.charIsAlphabetic;"},"equal":{"desc":"// Returns `x == y`.","body":"public func equal(x : Char, y : Char) : Bool { x == y };"},"notEqual":{"desc":"// Returns `x != y`.","body":"public func notEqual(x : Char, y : Char) : Bool { x != y };"},"less":{"desc":"// Returns `x < y`.","body":"public func less(x : Char, y : Char) : Bool { x < y };"},"lessOrEqual":{"desc":"// Returns `x <= y`.","body":"public func lessOrEqual(x : Char, y : Char) : Bool { x <= y };"},"greater":{"desc":"// Returns `x > y`.","body":"public func greater(x : Char, y : Char) : Bool { x > y };"},"greaterOrEqual":{"desc":"// Returns `x >= y`.","body":"public func greaterOrEqual(x : Char, y : Char) : Bool { x >= y };"},"compare":{"desc":"// Returns the order of `x` and `y`.","body":"public func compare(x : Char, y : Char) : { #less; #equal; #greater } {\n  if (x < y) { #less }\n  else if (x == y) { #equal }\n  else { #greater }\n}"}},"other":";\n// Not exposed pending multi-char implementation.\nprivate let toUpper : (c : Char) -> Char = Prim.charToUpper;\n// Not exposed pending multi-char implementation.\nprivate let toLower : (c : Char) -> Char = Prim.charToLower;","test":"import Debug \"mo:base/Debug\";\nimport Char \"mo:base/Char\";\nimport Prim \"mo:â›”\";\n\n/*\n//\n// Char.toUpper\n//\n\nassert(Char.toUpper('Ã¶') == 'Ã–');\nassert(Char.toUpper('Ïƒ') == 'Î£');\nassert(Char.toUpper('ðŸ’©') == 'ðŸ’©');\n\n//\n// Char.toLower\n//\n\nassert(Char.toLower('Ã–') == 'Ã¶');\nassert(Char.toLower('Î£') == 'Ïƒ');\nassert(Char.toLower('ðŸ’©') == 'ðŸ’©');\n*/\n\n//\n// Char.isWhitespace\n//\n\nassert(Char.isWhitespace(' '));\n\nassert(not Char.isWhitespace('x'));\n\n// 12288 (U+3000) = ideographic space\nassert(Char.isWhitespace(Prim.nat32ToChar(12288)));\n\nassert(Char.isWhitespace('\\t'));\n\n// Vertical tab ('\\v')\nassert(Char.isWhitespace(Prim.nat32ToChar(0x0B)));\n\n// Form feed ('\\f')\nassert(Char.isWhitespace(Prim.nat32ToChar(0x0C)));\n\nassert(Char.isWhitespace('\\r'));\n\n//\n// Char.isLowercase\n//\n\nassert(Char.isLowercase('x'));\nassert(not Char.isLowercase('X'));\n\n//\n// Char.isUppercase\n//\n\nassert(Char.isUppercase('X'));\nassert(not Char.isUppercase('x'));\n\n//\n// Char.isAlphabetic\n//\n\nassert(Char.isAlphabetic('a'));\nassert(Char.isAlphabetic('äº¬'));\nassert(not Char.isAlphabetic('ã‹¡'));\n"}