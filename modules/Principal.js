modules.Principal={"imports":{"mo:â›”":"Prim","Blob":"Blob","Hash":"Hash"},"functions":{"Principal":{"desc":"Internet Computer principal identifiers.\nConvert to `Blob` for access to bytes.","body":"public type Principal= Prim.Types.Principal;"},"fromActor":{"desc":"// Conversion.","body":"public let fromActor: (a : actor {}) -> Principal = Prim.principalOfActor;"},"toBlob":{"desc":"// Conversion.","body":"public let toBlob: (p : Principal) -> Blob = Prim.blobOfPrincipal;"},"fromBlob":{"desc":"// Conversion.","body":"public let fromBlob: (b : Blob) -> Principal = Prim.principalOfBlob;"},"toText":{"desc":"// Conversion.","body":"public func toText(p : Principal) : Text = debug_show(p);\n\nprivate let anonymousPrincipal : Blob = \"\\04\";"},"equal":{"desc":"// Returns `x == y`.","body":"public func equal(x : Principal, y : Principal) : Bool { x == y };"},"notEqual":{"desc":"// Returns `x != y`.","body":"public func notEqual(x : Principal, y : Principal) : Bool { x != y };"},"less":{"desc":"// Returns `x < y`.","body":"public func less(x : Principal, y : Principal) : Bool { x < y };"},"lessOrEqual":{"desc":"// Returns `x <= y`.","body":"public func lessOrEqual(x : Principal, y : Principal) : Bool { x <= y };"},"greater":{"desc":"// Returns `x > y`.","body":"public func greater(x : Principal, y : Principal) : Bool { x > y };"},"greaterOrEqual":{"desc":"// Returns `x >= y`.","body":"public func greaterOrEqual(x : Principal, y : Principal) : Bool { x >= y };"},"compare":{"desc":"// Returns the order of `x` and `y`.","body":"public func compare(x : Principal, y : Principal) : { #less; #equal; #greater } {\n  if (x < y) { #less }\n  else if (x == y) { #equal }\n  else { #greater }\n}"}},"related":"","test":""}