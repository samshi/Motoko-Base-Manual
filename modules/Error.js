modules.Error={"imports":{"mo:â›”":"Prim"},"functions":{"reject":{"desc":"Create an error from message `m` with code #canister_reject","body":"public let reject : (m : Text) -> Error = Prim.error;"},"code":{"desc":"// Returns the code of an error `e`","body":"public let code : (e : Error) -> ErrorCode = Prim.errorCode;"},"message":{"desc":"// Returns the message of an error `e`","body":"public let message : (e : Error) -> Text = Prim.errorMessage;"}},"other":"/// Error values resulting from  `async` computations\npublic type Error = Prim.Types.Error;\n/// Error codes (user and system), where module `Prim` defines:\n/// ```motoko\n/// type ErrorCode = {\n///   // Fatal error.\n///   #system_fatal;\n///   // Transient error.\n///   #system_transient;\n///   // Destination invalid.\n///   #destination_invalid;\n///   // Explicit reject by canister code.\n///   #canister_reject;\n///   // Canister trapped.\n///   #canister_error;\n///   // Future error code (with unrecognized numeric code)\n///   #future : Nat32;\n/// };\n/// ```\npublic type ErrorCode = Prim.ErrorCode;","test":""}