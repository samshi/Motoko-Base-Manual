modules.Bool={"imports":{"mo:â›”":"Prim"},"functions":{"Bool":{"desc":"Booleans with constants `true` and `false`.","body":"public type Bool= Prim.Types.Bool;"},"toText":{"desc":"// Conversion.","body":"public func toText(x : Bool) : Text {\n  if x { \"true\" } else { \"false\" }\n}"},"logand":{"desc":"Returns `x and y`.","body":"public func logand(x : Bool, y : Bool) : Bool { x and y };"},"logor":{"desc":"// Returns `x or y`.","body":"public func logor(x : Bool, y : Bool) : Bool { x or y };"},"logxor":{"desc":"// Returns exclusive or of `x` and `y`, `x != y`.","body":"public func logxor(x : Bool, y : Bool) : Bool {\n  x != y\n}"},"lognot":{"desc":"Returns `not x`.","body":"public func lognot(x : Bool) : Bool { not x };"},"equal":{"desc":"// Returns `x == y`.","body":"public func equal(x : Bool, y : Bool) : Bool { x == y };"},"notEqual":{"desc":"// Returns `x != y`.","body":"public func notEqual(x : Bool, y : Bool) : Bool { x != y };"},"compare":{"desc":"// Returns the order of `x` and `y`, where `false < true`.","body":"public func compare(x : Bool, y : Bool) : {#less; #equal; #greater } {\n  if (x == y) { #equal } else if (x) { #greater } else { #less }\n}"}},"related":"","test":""}