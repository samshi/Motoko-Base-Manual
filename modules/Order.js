modules.Order={"imports":{},"functions":{"isLess":{"desc":"Check if an order is #less.","body":"public func isLess(order : Order) : Bool {\n  switch order {\n    case (#less) { true };\n    case _ { false };\n  };\n}"},"isEqual":{"desc":"Check if an order is #equal.","body":"public func isEqual(order : Order) : Bool {\n  switch order {\n    case (#equal) { true };\n    case _ { false };\n  };\n}"},"isGreater":{"desc":"Check if an order is #greater.","body":"public func isGreater(order : Order) : Bool {\n  switch order {\n    case (#greater) { true };\n    case _ { false };\n  };\n}"},"equal":{"desc":"Returns true if only if  `o1` and `o2` are the same ordering.","body":"public func equal(o1 : Order, o2: Order) : Bool {\n  switch (o1, o2) {\n    case (#less, #less) { true };\n    case (#equal, #equal) { true };\n    case (#greater, #greater) { true };\n    case _ { false };\n  };\n}"}},"other":"/// A type to represent an order.\npublic type Order = {\n  #less;\n  #equal;\n  #greater;\n};","test":"import Order \"mo:base/Order\";\nimport Debug \"mo:base/Debug\";\n\nDebug.print(\"Order\");\n\ndo {\n  Debug.print(\"  isLess\");\n\n  assert(Order.isLess(#less));\n  assert(not Order.isLess(#equal));\n  assert(not Order.isLess(#greater));\n};\n\ndo {\n  Debug.print(\"  isEqual\");\n\n  assert(not Order.isEqual(#less));\n  assert(Order.isEqual(#equal));\n  assert(not Order.isEqual(#greater));\n};\n\ndo {\n  Debug.print(\"  isGreater\");\n\n  assert(not Order.isGreater(#less));\n  assert(not Order.isGreater(#equal));\n  assert(Order.isGreater(#greater));\n};\n"}