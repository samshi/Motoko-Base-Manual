modules.Stack={"imports":{"List":"List"},"functions":{"class.push":{"desc":"Push an element on the top of the stack.","body":"public func push(x:T) {\n  stack := ?(x, stack)\n}"},"class.isEmpty":{"desc":"True when the stack is empty.","body":"public func isEmpty() : Bool {\n  List.isNil<T>(stack)\n}"},"class.peek":{"desc":"Return and retain the top element, or return null.","body":"public func peek() : ?T {\n  switch stack {\n    case null { null };\n    case (?(h, t)) { ?h };\n  }\n}"},"class.pop":{"desc":"Remove and return the top element, or return null.","body":"public func pop() : ?T {\n  switch stack {\n    case null { null };\n    case (?(h, t)) { stack := t; ?h };\n  }\n}"}},"other":"public class Stack<T>() {\n  var stack : List.List<T> = List.nil<T>();\n};","test":"import Stack \"mo:base/Stack\";\nimport Iter \"mo:base/Iter\";\nimport O \"mo:base/Option\";\n\ndo {\n    var s = Stack.Stack<Nat>();\n    for (i in Iter.range(0, 100)) {\n        s.push(i);\n    };\n    for (i in Iter.revRange(100, 0)) {\n        let x = s.pop();\n        assert(O.unwrap(x) == i);\n    };\n    assert (s.isEmpty());\n};\n"}