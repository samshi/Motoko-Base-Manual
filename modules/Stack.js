modules.Stack={"imports":{"List":"List"},"functions":{"Stack":{"desc":"","body":"public class Stack<T>() {\n\n  var stack : List.List<T> = List.nil<T>();\n\n  /// Push an element on the top of the stack.\n  public func push(x:T) {\n    stack := ?(x, stack)\n  };\n\n  /// True when the stack is empty.\n  public func isEmpty() : Bool {\n    List.isNil<T>(stack)\n  };\n\n  /// Return and retain the top element, or return null.\n  public func peek() : ?T {\n    switch stack {\n      case null { null };\n      case (?(h, t)) { ?h };\n    }\n  };\n\n  /// Remove and return the top element, or return null.\n  public func pop() : ?T {\n    switch stack {\n      case null { null };\n      case (?(h, t)) { stack := t; ?h };\n    }\n  };\n}"}},"related":"","test":"import Stack \"mo:base/Stack\";\nimport Iter \"mo:base/Iter\";\nimport O \"mo:base/Option\";\n\ndo {\n    var s = Stack.Stack<Nat>();\n    for (i in Iter.range(0, 100)) {\n        s.push(i);\n    };\n    for (i in Iter.revRange(100, 0)) {\n        let x = s.pop();\n        assert(O.unwrap(x) == i);\n    };\n    assert (s.isEmpty());\n};\n"}